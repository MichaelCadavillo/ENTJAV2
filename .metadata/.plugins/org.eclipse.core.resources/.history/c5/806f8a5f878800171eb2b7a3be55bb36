package model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.servlet.ServletContext;

import utility.SQLCommand;

public class MRTBean implements SQLCommand{
	private String lastName;
	private String firstName;
	private int destinationCode;
	private String destinationName;
	private double destinationFare;
	private int stopNo;
	private double totalFare;
	private static double stop1 = 0;
	private static double stop2 = 0;
	private static double stop3 = 0;
	private static double stop4 = 0;
	private static double stop5 = 0;
	private static double stop6 = 0;
	
	public int getStopNo() {
		return stopNo;
	}
	public void setStopNo(int stopNo) {
		this.stopNo = stopNo;
	}
	public double getStop1() {
		return stop1;
	}
	public void setStop1(double stop1) {
		this.stop1 = stop1;
	}
	public double getStop2() {
		return stop2;
	}
	public void setStop2(double stop2) {
		this.stop2 = stop2;
	}
	public double getStop3() {
		return stop3;
	}
	public void setStop3(double stop3) {
		this.stop3 = stop3;
	}
	public double getStop4() {
		return stop4;
	}
	public void setStop4(double stop4) {
		this.stop4 = stop4;
	}
	public double getStop5() {
		return stop5;
	}
	public void setStop5(double stop5) {
		this.stop5 = stop5;
	}
	public double getStop6() {
		return stop6;
	}
	public void setStop6(double stop6) {
		this.stop6 = stop6;
	}
	public double getTotalFare() {
		return totalFare;
	}
	public void setTotalFare(double totalFare) {
		this.totalFare = totalFare;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public int getDestinationCode() {
		return destinationCode;
	}
	public void setDestinationCode(int destinationCode) {
		this.destinationCode = destinationCode;
	}
	public String getDestinationName() {
		return destinationName;
	}
	public void setDestinationName(String destinationName) {
		this.destinationName = destinationName;
	}
	public double getDestinationFare() {
		return destinationFare;
	}
	public void setDestinationFare(double destinationFare) {
		this.destinationFare = destinationFare;
	}
	
	public void setDestinationNameProfitAndFare(ServletContext context){
		if(this.destinationCode == 1){
			this.destinationName = context.getInitParameter("name-1");
			this.destinationFare = Double.parseDouble(context.getInitParameter("1"));
			this.stopNo = 1;
			MRTBean.stop1 += this.destinationFare;
		}else if(this.destinationCode == 2){
			this.destinationName = context.getInitParameter("name-2");
			this.destinationFare = Double.parseDouble(context.getInitParameter("2"));
			this.stopNo = 1;
			MRTBean.stop1 += this.destinationFare;
		}else if(this.destinationCode == 3){
			this.destinationName = context.getInitParameter("name-3");
			this.destinationFare = Double.parseDouble(context.getInitParameter("3"));
			this.stopNo = 2;
			MRTBean.stop2 += this.destinationFare;
		}else if(this.destinationCode == 4){
			this.destinationName = context.getInitParameter("name-4");
			this.destinationFare = Double.parseDouble(context.getInitParameter("4"));
			this.stopNo = 2;
			MRTBean.stop2 += this.destinationFare;
		}else if(this.destinationCode == 5){
			this.destinationName = context.getInitParameter("name-5");
			this.destinationFare = Double.parseDouble(context.getInitParameter("5"));
			this.stopNo = 3;
			MRTBean.stop3 += this.destinationFare;
		}else if(this.destinationCode == 6){
			this.destinationName = context.getInitParameter("name-6");
			this.destinationFare = Double.parseDouble(context.getInitParameter("6"));
			this.stopNo = 3;
			MRTBean.stop3 += this.destinationFare;
		}else if(this.destinationCode == 7){
			this.destinationName = context.getInitParameter("name-7");
			this.destinationFare = Double.parseDouble(context.getInitParameter("7"));
			this.stopNo = 4;
			MRTBean.stop4 += this.destinationFare;
		}else if(this.destinationCode == 8){
			this.destinationName = context.getInitParameter("name-8");
			this.destinationFare = Double.parseDouble(context.getInitParameter("8"));
			this.stopNo = 4;
			MRTBean.stop4 += this.destinationFare;
		}else if(this.destinationCode == 9){
			this.destinationName = context.getInitParameter("name-9");
			this.destinationFare = Double.parseDouble(context.getInitParameter("9"));
			this.stopNo = 5;
			MRTBean.stop5 += this.destinationFare;
		}else if(this.destinationCode == 10){
			this.destinationName = context.getInitParameter("name-10");
			this.destinationFare = Double.parseDouble(context.getInitParameter("10"));
			this.stopNo = 5;
			MRTBean.stop5 += this.destinationFare;
		}else if(this.destinationCode == 11){
			this.destinationName = context.getInitParameter("name-11");
			this.destinationFare = Double.parseDouble(context.getInitParameter("11"));
			this.stopNo = 6;
			MRTBean.stop6 += this.destinationFare;
		}else if(this.destinationCode == 12){
			this.destinationName = context.getInitParameter("name-12");
			this.destinationFare = Double.parseDouble(context.getInitParameter("12"));
			this.stopNo = 6;
			MRTBean.stop6 += this.destinationFare;
		}
	}
	
	//SQL Operations
	public Connection getConnection(String jdbcUrl,
			String dbUserName, String dbPassword){
		Connection connection = null;
		try {
			Class.forName("com.mysql.jdbc.Driver");
			
			connection = DriverManager
					.getConnection(jdbcUrl, dbUserName, dbPassword);
	}catch(ClassNotFoundException cnfe){
		System.err.println("Class not found: "+cnfe.getMessage());
	}catch(SQLException sqle){
		System.err.println("SQL Exception "+ sqle.getMessage());
	}
		return connection;
	}
	
	public void insertRecord(Connection connection){
		//Connection connection = getConnection();
		 if(connection !=null){
			 try{
				
				 
				 PreparedStatement pstmnt = connection.prepareStatement(INSERT_REC);
				 pstmnt.setString(1, this.lastName);
				 pstmnt.setString(2, this.firstName);
				 pstmnt.setString(3, this.destinationName);
				 pstmnt.setDouble(4, this.destinationFare);
				 
				 pstmnt.executeUpdate();
			 }catch(SQLException sqle){
				 throw new RuntimeException();
			 }
		 }
	}
	
	public ResultSet getAllRecords(Connection connection){
		ResultSet records = null;
		//Connection connection = getConnection();
		 if(connection !=null){
			 try{
				
				 
				 PreparedStatement pstmnt = connection.prepareStatement(GET_ALL_RECORDS);
				 
				 
				records = pstmnt.executeQuery();
			 }catch(SQLException sqle){
				 throw new RuntimeException();
			 }
		 }
		 return records;
	}
	
}
